@model InventoryManagement.WebUI.ViewModels.Warehouses.WarehouseIndexViewModel
@{
    ViewData["Title"] = Model.PageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-warehouse me-2"></i>@Model.PageTitle
                    </h1>
                    <p class="text-muted mb-0">Manage warehouse locations and storage facilities</p>
                </div>
                <div>
                    @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
                    {
                        <a href="@Url.Action("Create")" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>Add Warehouse
                        </a>
                    }
                </div>
            </div>

            <!-- Search and Filter Panel -->
            <div class="card mb-4">
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label for="searchTerm" class="form-label">Search</label>
                            <input type="text" class="form-control" id="searchTerm" name="searchTerm" 
                                   value="@Model.SearchTerm" placeholder="Search warehouses...">
                        </div>
                        <div class="col-md-2">
                            <label for="minCapacity" class="form-label">Min Capacity</label>
                            <input type="number" class="form-control" id="minCapacity" name="minCapacity" 
                                   value="@Model.MinCapacity" placeholder="0">
                        </div>
                        <div class="col-md-2">
                            <label for="maxCapacity" class="form-label">Max Capacity</label>
                            <input type="number" class="form-control" id="maxCapacity" name="maxCapacity" 
                                   value="@Model.MaxCapacity" placeholder="Unlimited">
                        </div>
                        <div class="col-md-2">
                            <label for="pageSize" class="form-label">Page Size</label>
                            <select class="form-select" id="pageSize" name="pageSize">
                                <option value="10" selected="@(Model.PageSize == 10)">10</option>
                                <option value="25" selected="@(Model.PageSize == 25)">25</option>
                                <option value="50" selected="@(Model.PageSize == 50)">50</option>
                                <option value="100" selected="@(Model.PageSize == 100)">100</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">&nbsp;</label>
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-outline-primary flex-fill">
                                    <i class="fas fa-search me-1"></i>Search
                                </button>
                                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                                    <i class="fas fa-times me-1"></i>Clear
                                </a>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="activeOnly" name="activeOnly" 
                                       value="true" @(Model.ActiveOnly ? "checked" : "")>
                                <label class="form-check-label" for="activeOnly">
                                    Show active warehouses only
                                </label>
                            </div>
                        </div>
                        <input type="hidden" name="sortBy" value="@Model.SortBy">
                        <input type="hidden" name="sortDirection" value="@Model.SortDirection">
                    </form>
                </div>
            </div>

            <!-- Results Summary -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="text-muted">
                    Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to 
                    @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount) of 
                    @Model.TotalCount warehouses
                </div>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-sort me-1"></i>Sort by @Model.SortBy
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="@Url.Action("Index", new { 
                            searchTerm = Model.SearchTerm, activeOnly = Model.ActiveOnly, pageSize = Model.PageSize,
                            minCapacity = Model.MinCapacity, maxCapacity = Model.MaxCapacity,
                            sortBy = "Name", sortDirection = Model.SortDirection == "asc" ? "desc" : "asc" })">
                            Name @(Model.SortBy == "Name" ? (Model.SortDirection == "asc" ? "↓" : "↑") : "")
                        </a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Index", new { 
                            searchTerm = Model.SearchTerm, activeOnly = Model.ActiveOnly, pageSize = Model.PageSize,
                            minCapacity = Model.MinCapacity, maxCapacity = Model.MaxCapacity,
                            sortBy = "Location", sortDirection = Model.SortDirection == "asc" ? "desc" : "asc" })">
                            Location @(Model.SortBy == "Location" ? (Model.SortDirection == "asc" ? "↓" : "↑") : "")
                        </a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Index", new { 
                            searchTerm = Model.SearchTerm, activeOnly = Model.ActiveOnly, pageSize = Model.PageSize,
                            minCapacity = Model.MinCapacity, maxCapacity = Model.MaxCapacity,
                            sortBy = "Capacity", sortDirection = Model.SortDirection == "asc" ? "desc" : "asc" })">
                            Capacity @(Model.SortBy == "Capacity" ? (Model.SortDirection == "asc" ? "↓" : "↑") : "")
                        </a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Index", new { 
                            searchTerm = Model.SearchTerm, activeOnly = Model.ActiveOnly, pageSize = Model.PageSize,
                            minCapacity = Model.MinCapacity, maxCapacity = Model.MaxCapacity,
                            sortBy = "InventoryCount", sortDirection = Model.SortDirection == "asc" ? "desc" : "asc" })">
                            Inventory Count @(Model.SortBy == "InventoryCount" ? (Model.SortDirection == "asc" ? "↓" : "↑") : "")
                        </a></li>
                    </ul>
                </div>
            </div>

            <!-- Warehouses Table -->
            @if (Model.Warehouses.Any())
            {
                <div class="card">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Location</th>
                                    <th>Capacity</th>
                                    <th>Utilization</th>
                                    <th>Products</th>
                                    <th>Status</th>
                                    <th>Last Updated</th>
                                    <th width="200">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var warehouse in Model.Warehouses)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <i class="fas fa-warehouse text-primary me-2"></i>
                                                <div>
                                                    <div class="fw-semibold">@warehouse.Name</div>
                                                    @if (!string.IsNullOrWhiteSpace(warehouse.Description))
                                                    {
                                                        <small class="text-muted">@warehouse.Description</small>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <i class="fas fa-map-marker-alt text-muted me-1"></i>
                                            @warehouse.Location
                                        </td>
                                        <td>
                                            @if (warehouse.Capacity.HasValue)
                                            {
                                                <span class="badge bg-light text-dark">@warehouse.Capacity.Value.ToString("N0")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Unlimited</span>
                                            }
                                        </td>
                                        <td>
                                            @if (warehouse.CapacityUtilization.HasValue)
                                            {
                                                var utilization = warehouse.CapacityUtilization.Value;
                                                string progressClass;
                                                if (utilization < 50)
                                                    progressClass = "bg-success";
                                                else if (utilization < 80)
                                                    progressClass = "bg-warning";
                                                else if (utilization < 95)
                                                    progressClass = "bg-danger";
                                                else
                                                    progressClass = "bg-danger";
                                                
                                                <div class="progress" style="height: 6px;">
                                                    <div class="progress-bar @progressClass" style="width: @Math.Min(utilization, 100)%"></div>
                                                </div>
                                                <small class="text-muted">@utilization.ToString("F1")%</small>
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-info">@warehouse.InventoryItemCount</span>
                                        </td>
                                        <td>
                                            @if (warehouse.IsActive)
                                            {
                                                <span class="badge bg-success">
                                                    <i class="fas fa-check me-1"></i>Active
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">
                                                    <i class="fas fa-times me-1"></i>Inactive
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                @warehouse.UpdatedAt.ToString("MMM dd, yyyy")
                                            </small>
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="@Url.Action("Details", new { id = warehouse.Id })" 
                                                   class="btn btn-sm btn-outline-primary" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
                                                {
                                                    <a href="@Url.Action("Edit", new { id = warehouse.Id })" 
                                                       class="btn btn-sm btn-outline-secondary" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <button type="button" class="btn btn-sm btn-outline-info" 
                                                            onclick="toggleWarehouseStatus(@warehouse.Id, @warehouse.IsActive.ToString().ToLower())"
                                                            title="@(warehouse.IsActive ? "Deactivate" : "Activate")">
                                                        <i class="fas fa-@(warehouse.IsActive ? "pause" : "play")"></i>
                                                    </button>
                                                }
                                                @if (User.IsInRole("Admin"))
                                                {
                                                    <a href="@Url.Action("Delete", new { id = warehouse.Id })" 
                                                       class="btn btn-sm btn-outline-danger" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </a>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Warehouse pagination" class="mt-4">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { 
                                    pageNumber = Model.CurrentPage - 1, pageSize = Model.PageSize,
                                    searchTerm = Model.SearchTerm, activeOnly = Model.ActiveOnly,
                                    minCapacity = Model.MinCapacity, maxCapacity = Model.MaxCapacity,
                                    sortBy = Model.SortBy, sortDirection = Model.SortDirection })">Previous</a>
                            </li>

                            @{
                                var startPage = Math.Max(1, Model.CurrentPage - 2);
                                var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { 
                                        pageNumber = i, pageSize = Model.PageSize,
                                        searchTerm = Model.SearchTerm, activeOnly = Model.ActiveOnly,
                                        minCapacity = Model.MinCapacity, maxCapacity = Model.MaxCapacity,
                                        sortBy = Model.SortBy, sortDirection = Model.SortDirection })">@i</a>
                                </li>
                            }

                            <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { 
                                    pageNumber = Model.CurrentPage + 1, pageSize = Model.PageSize,
                                    searchTerm = Model.SearchTerm, activeOnly = Model.ActiveOnly,
                                    minCapacity = Model.MinCapacity, maxCapacity = Model.MaxCapacity,
                                    sortBy = Model.SortBy, sortDirection = Model.SortDirection })">Next</a>
                            </li>
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-warehouse fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Warehouses Found</h5>
                        <p class="text-muted mb-4">
                            @if (!string.IsNullOrWhiteSpace(Model.SearchTerm))
                            {
                                <span>No warehouses match your search criteria.</span>
                            }
                            else
                            {
                                <span>No warehouses have been created yet.</span>
                            }
                        </p>
                        @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
                        {
                            <a href="@Url.Action("Create")" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Add First Warehouse
                            </a>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function toggleWarehouseStatus(warehouseId, isActive) {
            const action = isActive ? 'deactivate' : 'activate';
            if (!confirm(`Are you sure you want to ${action} this warehouse?`)) {
                return;
            }

            try {
                const response = await fetch(`@Url.Action("ToggleStatus")`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ id: warehouseId })
                });

                const result = await response.json();

                if (result.success) {
                    // Show success message and refresh page
                    showNotification(result.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification(result.message || 'Error updating warehouse status', 'error');
                }
            } catch (error) {
                showNotification('Network error occurred', 'error');
            }
        }

        function showNotification(message, type) {
            // Simple notification system
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            const container = document.querySelector('.container-fluid');
            container.insertAdjacentHTML('afterbegin', alertHtml);
        }
    </script>
}
